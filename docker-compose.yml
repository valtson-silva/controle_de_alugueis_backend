services:
  web:
    build: .
    container_name: control
    restart: always
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
    depends_on:
      - db
      - rabbitmq
    ports:
      - "8000:8000"
    networks:
      - default
    volumes:
      - ./rental_system:/rental_system
    command: gunicorn rental_system.wsgi:application --bind 0.0.0.0:8000

  db:
    image: postgres:17.2
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
    - default

  celery_worker:
    build: .
    restart: always
    depends_on: 
      - db
      - web
      - rabbitmq
    env_file:
      - .env
    command: ["celery", "-A", "rental_system", "worker", "--loglevel=info"]
  
  celery_beat:
    build: .
    restart: always
    depends_on:
      - web
      - rabbitmq
    env_file:
      - .env
    command: ["celery", "-A", "rental_system", "beat", "--loglevel=info"]

  test:
    build: .
    depends_on:
      - db
      - rabbitmq
    env_file:
      - .env
    command: ["pytest", "--disable-warnings", "--cov=app"]

networks:
  default:
    driver: bridge

volumes:
  postgres_data: